<!DOCTYPE html>
<html lang="ru">
<head>
    <title>WC3 Geometry</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <base href="wc3-geometry">
    <link rel="shortcut icon" type="image/png" href="favicon.png">
    <link rel="stylesheet" href="main.css">
    <link rel="stylesheet" href="fonts/Roboto/main.css">
    <link rel="stylesheet" href="fonts/JetBrainsMono/main.css">
    <script type="module" src="js/main.mjs" defer></script>
    <script type="module" src="js/example/axis.mjs" defer></script>
    <script type="module" src="js/example/angle.mjs" defer></script>
    <script type="module" src="js/example/distance-axis.mjs" defer></script>
    <script type="module" src="js/example/distance.mjs" defer></script>
    <script type="module" src="js/example/angle-between-points.mjs" defer></script>
    <script type="module" src="js/example/polar-offset.mjs" defer></script>
    <script type="module" src="js/example/angle-normalize.mjs" defer></script>
    <script type="module" src="js/example/angle-of-rotation.mjs" defer></script>
    <script type="module" src="js/example/line-slope.mjs" defer></script>
    <script type="module" src="js/example/line-point-perpendicular.mjs" defer></script>
    <script type="module" src="js/example/line-segment-intersect.mjs" defer></script>
    <script type="module" src="js/example/polygon-contain-point.mjs" defer></script>
    <script type="module" src="js/example/convex-hull.mjs" defer></script>
    <script type="module" src="js/example/parabola.mjs" defer></script>
</head>
<body>

<h1 class="header">Геометрия в игре</h1>
<div class="container">
    <!-- Предисловие -->
    <div>
        <h2 class="header header-ribbon">Предисловие</h2>
        <p>
            Цель этой статьи познакомить новичков с геометрией в игре. Так что не ждите здесь
            <a href="https://w.wiki/7XDe">пересечений параллельных прямых</a> и прочих интересных вещей.
            Здесь будут только базовые знания немного посыпанные формулами и объяснениями на уровне первого класса особо одарённых учеников. Так что заварите себе чаю, возьмите в зубы карандаш для умного вида и погнали.
        </p>
    </div>

    <!-- Координаты -->
    <div>
        <h2 id="axis" class="header header-ribbon">Координаты</h2>
        <p>Когда речь заходит о позиционировании, первым делом необходимо определить точку отсчёта. Игра использует
            <a href="https://w.wiki/7XDf">прямоугольную систему координат</a>, которую можно легко понять даже если вы плохо учились в школе.
        </p>

        <div class="canvas-text">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
        </div>
        <div class="canvas canvas-axis ar-1"></div>

        <p>Зелёные линии это оси. Горизонтальная именуется <b>X</b> или
            <b><i>ось абсцисс</i></b>, вертикальная соответственно
            <b>Y</b> или <b><i>ось ординат</i></b>. В их пересечении располагается точка <i>ноль</i>.</p>

        <p class="annotate">Учтите, что точка
            <i>ноль</i> не всегда находится в середине карты. При определённой криворукости, она вообще может оказаться за её пределами вследствие того, что при изменении границ карты координаты не сдвигаются относительно рельефа.
        </p>
    </div>

    <!-- Расстояние -->
    <div>
        <h2 id="distance" class="header header-ribbon">Расстояние</h2>
        <p>
            Когда речь заходит о
            <a href="https://w.wiki/7Z6h">расстоянии</a>, то первым на ум приходит расстояние между двумя точками.
            Но мы не будем сходу окунаться в двумерное пространство, а ограничимся одним измерением, то бишь точками на координатной прямой.
        </p>
        <p>
            Для того, чтобы вычислить расстояние между двумя точками на координатной прямой необходимо вычислить
            <a href="https://w.wiki/7Z79">абсолютную величину</a> разности двух координат.
        </p>

        <p>Говоря проще, необходимо отнять от одной координаты другую и выбросить минус, если он есть. Притом абсолютно не важно, какую координату из какой вычитать. Убедиться в этом вы можете на интерактивной демонстрации.</p>

        <div class="canvas-text no-ligatures">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
            <br>
            <div class="canvas-distance-axis-text"></div>
        </div>
        <div class="canvas canvas-distance-axis ar-2"></div>

        <p>Как вы могли заметить, формула прекрасно работает вне зависимости от направления оси. Теперь можно воспользоваться
            <a href="https://w.wiki/7axe">теоремой Пифагора</a> и найти расстояние между точками на плоскости.
        </p>

        <p>
            Если вы не понимаете, при чём здесь треугольники, то эта интерактивная демонстрация вам всё пояснит.
        </p>
        <div class="canvas-text ta-r">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
        </div>
        <div class="canvas canvas-distance ar-1"></div>

        <p>Как видите, у нас всегда получается треугольник <b>ABC</b>, где
            <b>AB</b> является <a href="https://w.wiki/7fU2">гипотенузой</a>. Её длину несложно вычислить по
            <a href="https://w.wiki/7axe">теореме Пифагора</a>:
            <b>AB<sup>2</sup> = AC<sup>2</sup> + BC<sup>2</sup></b>.</p>
        <pre class="canvas-distance-pre"><br><br><br></pre>

        <h3>Вычисление в игре</h3>
        <p>В файле
            <a href="https://github.com/nazarpunk/wc3-ujapi/blob/7ee48312a9c68dd27b810054fa11c3c986178fea/sdk/blizzard.j#L762">blizzard.j</a> находится специально обученная функция:
        </p>
        <pre>function DistanceBetweenPoints takes location locA, location locB returns real
    local real dx = GetLocationX(locB) - GetLocationX(locA)
    local real dy = GetLocationY(locB) - GetLocationY(locA)
    return SquareRoot(dx * dx + dy * dy)
endfunction</pre>
        <p>
            Если же вы являетесь счастливым обладателем
            <a href="https://xgm.guru/p/ujapi/UjAPI-Resource">UjAPI</a>, то можете воспользоваться следующими нативками:
        </p>
        <pre>
native MathDistanceBetweenPoints takes real fromX, real fromY, real toX, real toY returns real
native MathDistanceBetweenLocations takes location fromLoc, location toLoc returns real
</pre>
    </div>

    <!-- Углы -->
    <div>
        <h2 id="angles" class="header header-ribbon">Углы</h2>
        <p>Когда речь заходит про измерение
            <a href="https://w.wiki/7YCN">углов</a>, те, кто учился в школе сразу вспоминают
            <a href="https://w.wiki/7YBq">транспортир</a> и разметку
            <a href="https://w.wiki/7YBv">от нуля до 360</a>. Это всё прекрасно работает в своей области применения, но когда дело доходит до программирования то все культурные люди переходят на
            <a href="https://w.wiki/7YCS">радианы</a>. Они имеют много интересных и полезных геометрических свойств из-за чего в большинстве
            <a href="https://w.wiki/68GR">языков программирования</a> геометрические функции принимают на вход именно
            <a href="https://w.wiki/7YCS">радианы</a>.
        </p>

        <p>Для простоты понимания, по сложившейся традиции, наша команда подготовила интерактивную демонстрацию.</p>

        <div class="canvas-text">
            <div>Перемещайте точку зажав <b>ЛКМ</b></div>
            <br>
            <div class="canvas-angle-div"></div>
        </div>
        <div class="canvas canvas-angle ar-1"></div>
        <p>
            Чтобы не запутаться в единицах измерения будет очень полезно запомнить их обозначения:
        </p>
        <ul>
            <li>Градусы - Degrees - deg</li>
            <li>Радианы - Radians - rad</li>
        </ul>
        <h3>Получение в игре</h3>
        <p>В ваниле получить угол можно только у юнита:</p>
        <pre>constant native GetUnitFacing takes unit whichUnit returns real</pre>
        <p>В
            <a href="https://xgm.guru/p/ujapi/UjAPI-Resource">UjAPI</a>, естественно, функций будет немного больше:
        </p>
        <pre>constant native GetUnitFacing takes unit whichUnit returns real
native GetDoodadFacing takes doodad whichDoodad returns real
native GetSpecialEffectFacing takes effect whichEffect returns real
native GetTrackableFacing takes trackable whichTrackable returns real
native GetWidgetFacing takes widget whichWidget returns real
native GetDestructableFacing takes destructable whichDestructable returns real
native GetItemFacing takes item whichItem returns real
native GetProjectileFacing takes projectile whichProjectile returns real
native GetFrameSpriteFacing takes framehandle whichFrame returns real</pre>
        <p>Все эти функции возвращают угол в градусах в диапазоне
            <b>0 ... 360</b>. Чтобы перевести их в радианы, можете просто умножить их на константу
            <a href="https://github.com/nazarpunk/wc3-ujapi/blob/7ee48312a9c68dd27b810054fa11c3c986178fea/sdk/blizzard.j#L18C24-L18C35">bj_DEGTORAD</a> или воспользоваться следующей нативкой из
            <a href="https://xgm.guru/p/ujapi/UjAPI-Resource">UjAPI</a>:
        </p>
        <pre>native Deg2Rad takes real degrees returns real</pre>
    </div>

    <!-- Угол между двумя точками -->
    <div>
        <h2 id="angle-between-points" class="header header-ribbon">Угол между двумя точками</h2>
        <p>Как вы наверное догадались, у <a href="https://w.wiki/7dRv">точек</a> нет такого свойства как
            <a href="https://w.wiki/7YCN">угол</a>. Под этим обычно понимают минимальный угол между
            <a href="https://w.wiki/7dSH">векторами</a>. Если быть точнее, то минимальный угол, на который нужно повернуть вектор, чтоб он был сонаправлен с осью
            <b>X</b>. Звучит конечно слишком умно, поэтому смотрите на интерактивную демонстрацию и читайте объяснение ниже.
        </p>

        <div class="canvas-text">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
            <br>
            <div class="canvas-angle-between-points-div"></div>
        </div>
        <div class="canvas canvas-angle-between-points ar-1"></div>

        <p>Попытаемся вычислить угол <b>AB</b>, то бишь найти минимальный угол, на который необходимо повернуть точку
            <b>B</b> вокруг точки <b>A</b> так, чтобы <b>AB</b> совпал с <b>AB2</b>.</p>

        <p>Сместим <b>AB</b> таким образом, чтоб
            <b>A</b> совпала с началом координат. Это несложно. Просто разместим там точку <b>A1</b>.</p>

        <p>Разместим точку <b>B1</b> относительно <b>A1</b> таким же образом, как и
            <b>B</b> находится относительно <b>A</b>. Если вы внимательно посмотрите на
            <a href="#angle-between-points">интерактивный пример</a> то быстро догадаетесь как это сделать:<br>
        <pre class="canvas-angle-between-points-pre-diff"><br><br></pre>

        <p>Ну и в завершении, нам нужно вычислить
            <a href="https://w.wiki/7eeV">арктангенс</a> с помощью функции
            <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2">Atan2</a>.
        </p>
        <p>
            <a href="https://w.wiki/7eeV">Арктангенс</a> это угол между осью
            <b>X</b> и линией, проведенной из начала координат <b>0, 0</b> в точку с координатами
            <b>x, y</b>. Угол определяется в радианах в диапазоне от <b>-&pi;</b> до
            <b>&pi;</b>, исключая <b>-&pi;</b>.
        </p>

        <p>Так, как мы уже переместили <b>A</b> в <b>0, 0</b>, то нам остаётся только передать координаты
            <b>B1</b> в функцию:
        </p>
        <pre class="canvas-angle-between-points-pre-angle"><br></pre>

        <h3>Вычисление в игре</h3>
        <p>В файле
            <a href="https://github.com/nazarpunk/wc3-ujapi/blob/bc7d0c95a78c49dde28148c38290d9995e5b108a/sdk/blizzard.j#L757">blizzard.j</a> есть специально обученная функция.
        </p>
        <pre>function AngleBetweenPoints takes location locA, location locB returns real
    return bj_RADTODEG * Atan2(GetLocationY(locB) - GetLocationY(locA), GetLocationX(locB) - GetLocationX(locA))
endfunction</pre>
        <p>Для счастливых обладателей
            <a href="https://xgm.guru/p/ujapi/UjAPI-Resource">UjAPI</a> были добавлены следующие нативки.
        </p>
        <pre>native MathAngleBetweenPoints takes real fromX, real fromY, real toX, real toY returns real
native MathAngleBetweenLocations takes location fromLoc, location toLoc returns real</pre>
        <p>Все вышеперечисленные функции возвращают угол в градусах в диапазоне
            <b>-180 ... 180</b>, с чем не очень удобно работать. Поэтому напишем свою функцию:</p>
        <pre>function AngleBetweenXY takes real xa, real ya, real xb, real yb returns real
    return Atan2(by - ay, bx - ax)
endfunction</pre>
    </div>

    <!-- Полярное смещение -->
    <div>
        <h2 id="polar-offset" class="header header-ribbon">Полярное смещение</h2>
        <p>
            <a href="https://w.wiki/6ML2">Полярная система координат</a> не так сложна в понимании. В отличие от
            <a href="https://w.wiki/7fUE">прямоугольной системы координат</a>, точка обозначается не через две координаты, а через
            <a href="#distance">расстояние</a> и
            <a href="#angle-between-points">угол</a>.
        </p>
        <p>Из всех возможных применений такой системы мы рассмотрим только полярное смещение. То бишь способ, как сместить точку на определённое расстояние под определённым углом.</p>

        <p>Для лучшего понимания интерактивная демонстрация к вашим услугам.</p>

        <div class="canvas-text">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
        </div>
        <div class="canvas canvas-polar-offset ar-1"></div>

        <p>Чтоб лишний раз не повторяться допустим, что <a href="#distance">расстояние</a> (<b>len</b>) и
            <a href="#distance">угол</a> (<b>rad</b>) <b>AB</b> мы уже вычислили и наша задача сместить точку
            <b>B</b> в точку <b>B2</b> на то же расстояние под тем же углом.</p>

        <p>Здесь нам опять понадобится смещение <b>A</b> в
            <b>0, 0</b>. Можно воспользоваться способом, который мы применяли при
            <a href="#angle-between-points">вычислении углов</a>:</p>

        <pre><b>B1<sub>x</sub></b> = <b>B<sub>x</sub></b> - <b>A<sub>x</sub></b>
<b>B1<sub>y</sub></b> = <b>B<sub>y</sub></b> - <b>A<sub>y</sub></b></pre>

        <p>Хоть этот способ и прост, но он не позволяет нам изменять угол. Вот здесь на помощь приходит
            <a href="https://w.wiki/6ML2">полярная система координат</a>. Чтоб найти точку, лежащую на расстоянии (<b>len</b>) под углом (<b>rad</b>) от точки
            <b>0, 0</b> нужно воспользоваться формулой:</p>

        <pre><b>B1</b><sub>x</sub> = <i>Cos</i>(<b>rad</b>) * <b>len</b>
<b>B1</b><sub>y</sub> = <i>Sin</i>(<b>rad</b>) * <b>len</b></pre>

        <p>Чтоб нить разговора не потерялась, напомню, что иы смещаем точку <b>B</b> в точку <b>B2</b> на расстояние
            <b>len</b> под углом <b>rad</b>. На данный момент мы получили точку
            <b>B1</b>, которая находится на расстоянии
            <b>len</b> под углом <b>rad</b> от <b>0, 0</b>. И если прибавить к точке
            <b>B1</b> координаты <b>B</b>, то мы получим точку <b>B2</b>, которая находится на расстоянии
            <b>len</b> под углом <b>rad</b> от <b>B</b>.</p>

        <p>Запишем итоговую формулу:</p>
        <pre><b>B2<sub>x</sub></b> = <i>Cos</i>(<b>rad</b>) * <b>len</b> + <b>B<sub>x</sub></b>
<b>B2<sub>y</sub></b> = <i>Sin</i>(<b>rad</b>) * <b>len</b> + <b>B<sub>y</sub></b></pre>

        <h3>Вычисление в игре</h3>
        <p>
            В файле
            <a href="https://github.com/nazarpunk/wc3-ujapi/blob/bc7d0c95a78c49dde28148c38290d9995e5b108a/sdk/blizzard.j#L769">blizzard.j</a> вы можете найти функцию:
        </p>
        <pre>function PolarProjectionBJ takes location source, real dist, real angle returns location
    local real x = GetLocationX(source) + dist * Cos(angle * bj_DEGTORAD)
    local real y = GetLocationY(source) + dist * Sin(angle * bj_DEGTORAD)
    return Location(x, y)
endfunction</pre>
        <p>Она принимает угол в градусах, и создаёт <b>Location</b>, который нужно потом уничтожать во избежание утечек.
        </p>

        <p>В <a href="https://xgm.guru/p/ujapi/UjAPI-Resource">UjAPI</a> тоже есть функции:</p>

        <pre>native MathPointProjectionX takes real x, real angle, real distance returns real
native MathPointProjectionY takes real y, real angle, real distance returns real</pre>

        <p>Но они так же принимают угол в градусах, что не очень хорошо для ментального здоровья. Посему мы напишем собственные функции с блэкджеком и радианами:</p>
        <pre>function PolarProjectionX takes real x, real dist, real angle returns real
    return Cos(angle) * dist + x
endfunction
function PolarProjectionY takes real y, real dist, real angle returns real
    return Sin(angle) * dist + y
endfunction</pre>
    </div>

    <!-- Нормализация угла -->
    <div>
        <h2 id="angle-normalize" class="header header-ribbon">Нормализация угла</h2>
        <p>
            В нашем случае нормализация это приведение любого значения угла в диапазон от <b>-&pi;</b> до
            <b>&pi;</b>, исключая
            <b>-&pi;</b>. Используется редко, но именно здесь логичней всего о ней рассказать пока не забылись знания о
            <a href="#polar-offset">полярном смещении</a>.
        </p>

        <div class="canvas-text">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
        </div>
        <div class="canvas canvas-angle-normalize ar-1"></div>

        <p>
            Рассмотрим бытовую ситуацию - вам нужно нарисовать пентаграмму с центром в точке
            <b>A</b> и одним из лучей в точке <b>B</b>.
            Простейшим решением будет найти угол между лучами, в нашем случае это <b>2&pi;/5</b>, и с помощью
            <a href="#polar-offset">полярного смещения</a> нарисовать остальные лучи.
        </p>

        <p>Так как мы уже умеем <a href="#distance">вычислять расстояние</a>, то осталось только посчитать углы:</p>
        <pre class="canvas-angle-normalize-a"><br><br><br><br><br></pre>

        <p>
            Как видите, у некоторых углов значение превышает 2&pi;, то есть полный угол. Для расположений точки на плоскости такой угол вполне годится. Но, когда дело коснётся оборотов, то можно ступить ногами в жир.
        </p>

        <p>Нормализуем все углы и обрамим нашу пентаграмму пятиугольником. Для краткости, обозначим функцию нормализации как
            <b>N</b>:</p>

        <pre class="canvas-angle-normalize-b"><br><br><br><br><br></pre>

        <h3>Вычисление в игре</h3>
        <p>Для нормализации угла функций никто не завёз, поэтому мы напишем её руками:</p>

        <pre>function AngleNormalize takes real angle returns real
    if angle > -bj_PI and angle <= bj_PI then
        return angle
    endif
    set angle = ModuloReal(angle + bj_PI, bj_PI * 2)
    if angle < 0 then
        return angle + bj_PI
    else
        return angle - bj_PI
    endif
endfunction</pre>

    </div>

    <!-- Угол поворота -->
    <div>
        <h2 id="angle-of-rotation" class="header header-ribbon">Угол поворота</h2>

        <p>Угол поворота — это минимальный угол, на который нужно повернуть
            <a href="https://w.wiki/7sa6">луч</a>, исходящий из точки
            <b>O</b>, чтобы он совпал с другим <a href="https://w.wiki/7sa6">лучом</a>, исходящим из этой же точки.</p>

        <p>Мы уже сталкивались с этим при вычислении
            <a href="#angle-between-points">угла между двумя точками</a>. Только там в роли второго угла выступало положительное направление оси
            <b>X</b>, здесь же это будет произвольный угол.</p>

        <div class="canvas-text">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
        </div>
        <div class="canvas canvas-angle-of-rotation ar-1"></div>

        <p>Из точки <b>A</b> исходят два луча: <b>AB</b> и <b>AC</b>. Углом поворота <b>D</b> для угла
            <b>AB</b> по отношению к <b>AC</b> будет такое значение, при котором <b>AB + D = AC</b>.</p>

        <p>Можно наивно вычислить <b>D</b> из уравнения <b>AB + D = AC</b>:</p>
        <pre class="canvas-angle-of-rotation-pre-a"><br></pre>

        <p>Если подвигать точки на интерактивной демонстрации, то можно заметить, что в некоторых случаях
            <a href="https://w.wiki/7Z79">абсолютное значение</a>
            <b>D</b> больше чем &pi;. Это значит, что существует угол, с меньшим
            <a href="https://w.wiki/7Z79">абсолютным значением</a> и противоположным знаком. Необходимо только его вычислить:
        </p>
        <ul>
            <li>Если <b>D</b> больше <b>&pi;</b>, то отнимем от него <b>-2&pi;</b></li>
            <li>Если <b>D</b> меньше <b>-&pi;</b>, то прибавим к нему <b>2&pi;</b></li>
        </ul>
        <p>Для проверки разместим точку <b>E</b> таким образом, что угол <b>AE = AB + D</b>:</p>

        <pre class="canvas-angle-of-rotation-pre-b"><br><br><br></pre>

        <p>Как видите, на интерактивной демонстрации угол <b>AE</b> всегда совпадает с углом
            <b>AC</b>, но их численные значения не всегда одинаковы.</p>

        <pre class="canvas-angle-of-rotation-pre-c"><br><br></pre>

        <p>Напрашивается вопрос, а зачем же это всё нужно? Всё просто:</p>

        <ul>
            <li>По знаку
                <b>D</b> можно определить, в какую сторону поворачивать угол. Отрицательный &mdash; по часовой стрелке. Положительный &mdash; против.
            </li>
            <li>По <a href="https://w.wiki/7Z79">абсолютному значению</a>
                <b>D</b> можно определить, принадлежит ли угол <b>AC</b>
                <a href="https://w.wiki/7kah">сектору окружности</a>.
            </li>

        </ul>

        <h3>Вычисление в игре</h3>

        <p>Как обычно, функций для работы с углами не завезли, поэтому пользуемся собственной функцией:</p>
        <pre>function AngleOfRotation takes real a, real b returns real
    local real d = b - a
    if d > bj_PI then
        return d - 2 * bj_PI
    elseif d < -bj_PI then
        return d + 2 * bj_PI
    endif
    return d
endfunction</pre>
    </div>

    <!-- Угловой коэффициент прямой -->
    <div>
        <h2 id="line-slope" class="header header-ribbon">Угловой коэффициент прямой</h2>
        <p>Он же
            <a href="https://w.wiki/7wsd">наклон прямой</a> численно равен тангенсу угла между положительным направлением оси абсцисс и данной прямой.
        </p>
        <p>Если упростить, то зачастую нужно работать не с двумя точками, а с прямой, проходящей через них. Если вычислять
            <a href="#angle-between-points">угол между точками</a>, то важен порядок точек, что не применимо в случае прямой. Посему требуется универсальное число, обозначающее наклон прямой.
        </p>

        <div class="canvas-text">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
            <div class="canvas-line-slope-div"></div>
        </div>
        <div class="canvas canvas-line-slope ar-1"></div>
        <label><input type="checkbox" class="canvas-line-slope-grid">Выровнять по сетке</label>

        <p>Вычисляется <a href="https://w.wiki/7wsd">угол наклона</a> довольно просто:</p>
        <pre>k = &Delta;y / &Delta;x</pre>
        <p>Если вы не знакомы с
            <a href="https://w.wiki/7$Wz">дельтой</a>, то вкратце, это разница между чем либо. В нашем случае между координатами:
        </p>
        <pre class="canvas-line-slope-pre-a"><br></pre>
        <p>Если вы беспокоитесь о порядке точек, то легко можно убедиться, что он не важен:</p>
        <pre class="canvas-line-slope-pre-b"><br></pre>

        <p>Учтите, что параллельная оси <b>Y</b> имеет
            <a href="https://w.wiki/7wsd">наклон</a> равный бесконечности. В языках которые её не поддерживают это может грозить многими печалями.
        </p>

        <p>На интерактивной демонстрации выше вы можете наблюдать две прямые: <b>AB</b> и <b>AC</b> и их
            <a href="https://w.wiki/7wsd">наклон</a> обозначенный соответственно <b>kAB</b> и
            <b>kCD</b>. У него есть довольно интересные свойства.</p>

        <p>Прямые перпендикулярны при:</p>
        <pre><b>kAB</b> * <b>kCD</b> = -1</pre>

        <p>Прямые параллельны при:</p>
        <pre><b>kAB</b> - <b>kCD</b> = 0</pre>

        <h3>Вычисление в игре</h3>
        <p>В голом виде здесь вычислять ничего не требуется.
            <a href="https://w.wiki/7wsd">Наклон</a> необходим для дальнейших вычислений всякого. Но если вам вдруг понадобится вычисление параллельности/перпендикулярности прямых, то вы всегда можете
            <a href="https://xgm.guru/p/wc3/geometry">написать</a> об этом.</p>
    </div>


    <!-- Перпендикуляр из точки к прямой -->
    <div>
        <h2 id="line-point-perpendicular" class="header header-ribbon">Перпендикуляр из точки к прямой</h2>
        <p>Для всевозможных кастов по прямой зачастую используют всевозможные алгоритмы разной степени унылости. Пора прекратить это безобразие.</p>

        <div class="canvas-text">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
        </div>
        <div class="canvas canvas-line-point-perpendicular ar-1"></div>
        <label><input type="checkbox" class="canvas-line-point-perpendicular-grid">Выровнять по сетке</label>

        <p>В данном примере у нас есть прямая, заданная двумя точками <b>A</b>, <b>B</b> и точка
            <b>С</b>. Функция, приведённая ниже вычислит точку
            <b>С1</b>, которая является кратчайшим расстоянием от прямой
            <b>AB</b> до точки <b>C</b>.</p>

        <h3>Вычисление в игре</h3>
        <p>Как вы уже наверно догадались, разработчикам абсолютно наплевать на геометрию и функции придётся писать руками:</p>
        <pre>globals
   real LinePointPerpendicularX = 0
   real LinePointPerpendicularY = 0
endglobals

function LinePointPerpendicular takes real xa, real ya, real xb, real yb, real px, real py returns nothing
    local real m
    local real c
    local real mPerpendicular
    local real cPerpendicular

    // Прямая, параллельная оси X
    if ya == yb then
        set LinePointPerpendicularX = px
        set LinePointPerpendicularY = ya
        return
    endif

    // Прямая, параллельная оси Y
    if xa == xb then
        set LinePointPerpendicularX = xa
        set LinePointPerpendicularY = py
        return
    endif

    set m = (yb - ya) / (xb - xa) // Находим угловой коэффициент прямой AB
    set c = ya - m * xa // Находим свободный член c уравнения прямой AB
    set mPerpendicular = -1 / m // Находим угловой коэффициент перпендикулярной прямой
    set cPerpendicular = py - mPerpendicular * px // Находим свободный член c уравнения перпендикулярной прямой, проходящей через точку (x, y)

    // Находим точку пересечения перпендикулярной прямой с прямой AB
    set LinePointPerpendicularX = (cPerpendicular - c) / (m - mPerpendicular)
    set LinePointPerpendicularY = m * LinePointPerpendicularX + c
endfunction</pre>

        <p>Данная функция принимает координаты двух точек, обозначающих прямую <b>xa</b>, <b>ya</b>, <b>xb</b>,
            <b>yb</b>, координаты точки <b>px</b>,
            <b>py</b> и устанавливает в глобальных переменных координаты искомой точки.</p>

        <p>Далее вы можете воспользоваться нативкой, которая учитывает коллизию юнита:</p>
        <pre>constant native IsUnitInRangeXY takes unit whichUnit, real x, real y, real distance returns boolean</pre>

        <p>Или же просто вычислить
            <a href="#distance">расстояние</a> и использовать его в своих целях. Только не забывайте, что прямая бесконечна и вам может понадобиться
            <a href="#angle-of-rotation">угол поворота</a>.</p>
    </div>

    <!-- Пересечение отрезков -->
    <div>
        <h2 id="line-segment-intersect" class="header header-ribbon">Пересечение отрезков</h2>
        <p>Для работы с молниями, и прочими прямыми, может понадобиться найти их пересечения чтоб заклинания не выглядели уныло. </p>

        <div class="canvas-text">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
            <br>
            <div class="canvas-line-segment-intersect-div"></div>
        </div>
        <div class="canvas canvas-line-segment-intersect ar-1"></div>
        <label><input type="checkbox" class="canvas-line-segment-intersect-grid">Выровнять по сетке</label>

        <h3>Вычисление в игре</h3>
        <p>Чем дальше в лес, тем толще партизаны и всё яростней разработчики доказывают, что функции для работы с геометрией придётся писать руками:</p>
        <pre>globals
    real LineSegmentIntersectX = 0
    real LineSegmentIntersectY = 0
    boolean LineSegmentIntersectA = false
    boolean LineSegmentIntersectB = false
endglobals

function LineSegmentIntersect takes real ax, real ay, real bx, real by, real cx, real cy, real dx, real dy returns boolean
    local real a
    local real b
    local real na
    local real nb
    local real d = (dy - cy) * (bx - ax) - (dx - cx) * (by - ay)

    set LineSegmentIntersectX = 0
    set LineSegmentIntersectY = 0
    set LineSegmentIntersectA = false
    set LineSegmentIntersectB = false

    if d == 0 then
        return false
    endif

    set a = ay - cy
    set b = ax - cx
    set na = (dx - cx) * a - (dy - cy) * b
    set nb = (bx - ax) * a - (by - ay) * b
    set a = na / d
    set b = nb / d

    set LineSegmentIntersectX = ax + a * (bx - ax)
    set LineSegmentIntersectY = ay + a * (by - ay)
    set LineSegmentIntersectA = a > 0 and a < 1 // Находится ли точка пересечения на первом отрезке
    set LineSegmentIntersectB = b > 0 and b < 1 // Находится ли точка пересечения на втором отрезке

    return true
endfunction</pre>

        <p>Функция принимает восемь аргументов с координатами четырёх точек задающих два отрезка и возвращает логическую, указывающую пересекаются ли прямые в одной и только одной точке.
            При этом в глобалках устанавливаются точка пересечения и находится ли точка пересечения на каждом отрезке.</p>

        <p>Подозреваю, что вы можете запутаться, в каком порядке передавать аргументы. Посему объясню на примере точек из кропотливо сделанной интерактивной демонстрации:</p>
        <pre><b>A<sub>x</sub></b> <b>A<sub>y</sub></b> <b>B<sub>x</sub></b> <b>B<sub>y</sub></b> <b>C<sub>x</sub></b> <b>C<sub>y</sub></b> <b>D<sub>x</sub></b> <b>D<sub>y</sub></b></pre>
        <p>В таком случае <b>LineSegmentIntersectA</b> будет указывать, лежит ли точка пересечения на отрезке
            <b>AB</b> и соответственно <b>LineSegmentIntersectB</b> на <b>CD</b>.</p>
    </div>

    <!-- Принадлежность точки многоугольнику -->
    <div>
        <h2 id="polygon-contain-point" class="header header-ribbon">Принадлежность точки многоугольнику</h2>
        <p>Зачастую стандартных прямоугольников не хватает и хочется чего-то более интересного. Например, произвольных многоугольников. Для этого нам необходимо решить
            <a href="https://w.wiki/7nBa">задачу о принадлежности точки многоугольнику</a>, которая имеет несколько решений в зависимости от требуемого поведения при работе с самопересекающимися многоугольниками.
        </p>

        <div class="canvas-text">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
            <br>
            <div class="canvas-polygon-contain-point-div"></div>
        </div>
        <div class="canvas canvas-polygon-contain-point ar-1"></div>
        <label><input type="checkbox" class="canvas-polygon-contain-point-grid">Выровнять по сетке</label>

        <p>Мы выбрали решение, требующее меньше всего вычислений. Пускаем из искомой точки луч параллельно оси
            <b>X</b> и считаем количество пересечений с рёбрами. Если это количество чётное, то точка находится снаружи. Если нечётное, то внутри.
        </p>

        <p>Так же мы добавили дополнительную проверку, принадлежит ли точка ребру, чтоб избежать неопределённого поведения в отдельных случаях.</p>

        <h3>Вычисление в игре</h3>
        <p>Так как волшебный JASS не даёт передавать массивы в функцию, то мы заморочимся и напишем свой менеджер многоугольников на хэштаблицах:</p>
        <pre>globals
    hashtable PolygonHT = InitHashtable()
endglobals

function PolygonDestroy takes integer index returns nothing
    call FlushChildHashtable(PolygonHT, index)
endfunction

function PolygonAddPoint takes integer index, real x, real y returns nothing
    local integer cursor
    local integer idx
    if HaveSavedInteger(PolygonHT, index, 0) then
        set cursor = LoadInteger(PolygonHT, index, 0)
    else
        set cursor = -1
    endif
    set cursor = cursor + 1
    set idx = cursor * 2

    call SaveReal(PolygonHT, index, idx, x)
    call SaveReal(PolygonHT, index, idx + 1, y)

    call SaveInteger(PolygonHT, index, 0, cursor)
endfunction

function PolygonCountPoint takes integer index returns integer
    if HaveSavedInteger(PolygonHT, index, 0) then
        return LoadInteger(PolygonHT, index, 0) + 1
    else
        return 0
    endif
endfunction

function PolygonEdgeContainPoint takes real ax, real ay, real bx, real by, real px, real py returns boolean
    if (py - ay) * (bx - ax) - (px - ax) * (by - ay) != 0 then
        return false
    endif
    return RMinBJ(ax, bx) <= px and px <= RMaxBJ(ax, bx) and RMinBJ(ay, by) <= py and py <= RMaxBJ(ay, by)
endfunction

function PolygonContainPoint takes integer index, real x, real y returns boolean
    local integer count = PolygonCountPoint(index)
    local boolean inside = false
    local integer i = 0
    local integer j = count - 1
    local real ax
    local real ay
    local real bx
    local real by

    if count < 3 then
        return false
    endif

    loop
        exitwhen i >= count

        set ax = LoadReal(PolygonHT, index, i * 2)
        set ay = LoadReal(PolygonHT, index, i * 2 + 1)
        set bx = LoadReal(PolygonHT, index, j * 2)
        set by = LoadReal(PolygonHT, index, j * 2 + 1)

        // Дополнительная проверка на пересечение с ребром.
        // Можно безболезненно удалить для повышения производительности.
        if PolygonEdgeContainPoint(ax, ay, bx, by, x, y) then
            return true
        endif

        if (ay > y) != (by > y) and x < ((bx - ax) * (y - ay)) / (by - ay) + ax then
            set inside = not inside
        endif
        set j = i
        set i = i + 1
    endloop

    return inside
endfunction</pre>
    </div>

    <!-- Построение выпуклой оболочки -->
    <div>
        <h2 id="convex-hull" class="header header-ribbon">Построение выпуклой оболочки</h2>
        <p>Прекрасное определение <a href="https://w.wiki/7p9X">выпуклой оболочке</a> дано в
            <a href="https://w.wiki/7p9X">википедии</a>, им мы и воспользуемся:</p>
        <p>
            Представьте себе доску, в которую вбито — но не по самую шляпку — много гвоздей. Возьмите верёвку, свяжите на ней скользящую петлю (лассо) и набросьте её на доску, а потом затяните. Верёвка окружает все гвозди, но касается она только некоторых, самых внешних. В таком положении петля и окружённая ей область доски являются выпуклой оболочкой для всей группы гвоздей.
        </p>

        <div class="canvas-text">
            <div>Перемещайте точки зажав <b>ЛКМ</b></div>
        </div>
        <div class="canvas canvas-convex-hull ar-1"></div>
        <label><input type="checkbox" class="canvas-convex-hull-grid">Выровнять по сетке</label>

        <p>Для построения воспользуемся алгоритмом
            <a href="https://dpd.cs.princeton.edu/Papers/BarberDobkinHuhdanpaa.pdf">Quickhull</a>, или, говоря по-русски,
            <a href="https://w.wiki/7pLY">алгоритмом быстрой оболочки</a>.</p>

        <p>Подробнее можете почитать на
            <a href="http://qhull.org/">официальном сайте</a> алгоритма, нам важна только его сложность:
            <b>O(N log N)</b>.</p>

        <h3>Вычисление в игре</h3>
        <p>Так как волшебный JASS не даёт передавать массивы в функцию, то мы заморочимся и напишем свой менеджер точек на массивах:</p>
        <pre>globals
    real array ConvexHullInputX
    real array ConvexHullInputY
    integer array ConvexHullInputIndex
    integer ConvexHullInputCursor = -1
    real array ConvexHullX
    real array ConvexHullY
    integer ConvexHullCursor = -1
endglobals

function ConvexHullInputAdd takes real x, real y returns nothing
    set ConvexHullInputCursor = ConvexHullInputCursor + 1
    set ConvexHullInputIndex[ConvexHullInputCursor] = ConvexHullInputCursor
    set ConvexHullInputX[ConvexHullInputCursor] = x
    set ConvexHullInputY[ConvexHullInputCursor] = y
endfunction

function ConvexHullInputSortSwap takes integer i, integer j returns nothing
    local integer temp = ConvexHullInputIndex[i]
    set ConvexHullInputIndex[i] = ConvexHullInputIndex[j]
    set ConvexHullInputIndex[j] = temp
endfunction

function ConvexHullInputSort takes integer low, integer high returns nothing
    local integer i = low - 1
    local integer j = low
    local integer ji
    local real jx
    local real jy
    local integer pi
    local real px
    local real py

    if low >= high then
        return
    endif

    loop
        exitwhen j >= high
        set ji = ConvexHullInputIndex[j]
        set jx = ConvexHullInputX[ji]
        set jy = ConvexHullInputY[ji]
        set pi = ConvexHullInputIndex[high]
        set px = ConvexHullInputX[pi]
        set py = ConvexHullInputY[pi]
        if jx < px or jx == px and jy < py then
            set i = i + 1
            call ConvexHullInputSortSwap(i, j)
        endif
        set j = j + 1
    endloop
    call ConvexHullInputSortSwap(i + 1, high)

    call ConvexHullInputSort(low, i)
    call ConvexHullInputSort(i + 2, high)
endfunction

function ConvexHullRemoveMiddle takes real cx, real cy returns boolean
    local real ax = ConvexHullX[ConvexHullCursor - 1]
    local real ay = ConvexHullY[ConvexHullCursor - 1]
    local real bx = ConvexHullX[ConvexHullCursor]
    local real by = ConvexHullY[ConvexHullCursor]
    local real abx = ax - bx
    local real aby = ay - by
    local real cbx = cx - bx
    local real cby = cy - by
    local real cross = abx * cby - aby * cbx
    return cross < 0 or cross == 0 and abx * cbx + aby * cby <= 0
endfunction

function ConvexHull takes nothing returns nothing
    local real n = ConvexHullInputCursor + 1
    local integer i = 0
    local integer j
    local integer ji
    local real jx
    local real jy

    call ConvexHullInputSort(0, ConvexHullInputCursor)
    set ConvexHullCursor = -1

    loop
        exitwhen i >= 2 * n

        if i < n then
            set j = i
        else
            set j = 2 * n - 1 - i
        endif

        set ji = ConvexHullInputIndex[j]
        set jx = ConvexHullInputX[ji]
        set jy = ConvexHullInputY[ji]
        loop
            exitwhen ConvexHullCursor < 1 or  not ConvexHullRemoveMiddle(jx, jy)
            set ConvexHullCursor = ConvexHullCursor - 1
        endloop

        set ConvexHullCursor = ConvexHullCursor + 1
        set ConvexHullX[ConvexHullCursor] = jx
        set ConvexHullY[ConvexHullCursor] = jy
        set i = i + 1
    endloop

    set ConvexHullCursor = ConvexHullCursor - 1
endfunction</pre>
    </div>

    <!-- Парабола -->
    <div style="display: none">
        <h2 id="parabola" class="header header-ribbon">Парабола</h2>
        <div class="canvas canvas-parabola ar-1"></div>

        <p>

        </p>


    </div>
</div>

</body>
</html>
